// Generated by https://github.com/foxglove/schemas
// Options: {}

import { ArrowPrimitive } from "@foxglove/schemas/schemas/typescript/ArrowPrimitive";
import { CubePrimitive } from "@foxglove/schemas/schemas/typescript/CubePrimitive";
import { CylinderPrimitive } from "@foxglove/schemas/schemas/typescript/CylinderPrimitive";
import { Duration } from "@foxglove/schemas/schemas/typescript/Duration";
import { KeyValuePair } from "@foxglove/schemas/schemas/typescript/KeyValuePair";
import { LinePrimitive } from "@foxglove/schemas/schemas/typescript/LinePrimitive";
import { ModelPrimitive } from "@foxglove/schemas/schemas/typescript/ModelPrimitive";
import { SpherePrimitive } from "@foxglove/schemas/schemas/typescript/SpherePrimitive";
import { TextPrimitive } from "@foxglove/schemas/schemas/typescript/TextPrimitive";
import { Time } from "@foxglove/schemas/schemas/typescript/Time";
import { TriangleListPrimitive } from "@foxglove/schemas/schemas/typescript/TriangleListPrimitive";

/** A visual element in a 3D scene. An entity may be composed of multiple primitives which all share the same frame of reference. */
export type SceneEntity = {
  /** Timestamp of the entity */
  timestamp: Time;

  /** Frame of reference */
  frame_id: string;

  /** Identifier for the entity. A entity will replace any prior entity on the same topic with the same `id`. */
  id: string;

  /** Length of time (relative to `timestamp`) after which the entity should be automatically removed. Zero value indicates the entity should remain visible until it is replaced or deleted. */
  lifetime: Duration;

  /** Whether the entity should keep its location in the fixed frame (false) or follow the frame specified in `frame_id` as it moves relative to the fixed frame (true) */
  frame_locked: boolean;

  /** Additional user-provided metadata associated with the entity. Keys must be unique. */
  metadata: KeyValuePair[];

  /** Arrow primitives */
  arrows: ArrowPrimitive[];

  /** Cube primitives */
  cubes: CubePrimitive[];

  /** Sphere primitives */
  spheres: SpherePrimitive[];

  /** Cylinder primitives */
  cylinders: CylinderPrimitive[];

  /** Line primitives */
  lines: LinePrimitive[];

  /** Triangle list primitives */
  triangles: TriangleListPrimitive[];

  /** Text primitives */
  texts: TextPrimitive[];

  /** Model primitives */
  models: ModelPrimitive[];
};
